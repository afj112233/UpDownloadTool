<UserControl
    x:Class="ICSStudio.Dialogs.Filter.FilterView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:ICSStudio.Gui.Controls;assembly=ICSStudio.Gui"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:ICSStudio.Dialogs.Filter"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:view="clr-namespace:ICSStudio.Gui.View;assembly=ICSStudio.Gui"
    Width="auto"
    Height="auto"
    MinWidth="570"
    MinHeight="290"
    Background="LightSteelBlue"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/ICSStudio.Gui;component/Resources/styles/Default.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <view:BindingProxy x:Key="Proxy" Data="{Binding}" />
            <DataTemplate x:Key="ServerDataTemplate">
                <materialDesign:PackIcon Kind="DesktopTower" />
            </DataTemplate>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.Resources>
            <local:LeftMarginConverter x:Key="LeftMarginConverter" />
            <local:GridLeftMarginConverter x:Key="GridLeftMarginConverter" />
            <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid
                                Width="15"
                                Height="13"
                                SnapsToDevicePixels="True">
                                <!--  Rectangle 9x9 pixels  -->
                                <Rectangle
                                    Width="9"
                                    Height="9"
                                    SnapsToDevicePixels="true"
                                    Stroke="#919191">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,2">
                                            <GradientStop Offset="0" Color="White" />
                                            <GradientStop Offset="0.5" Color="Silver" />
                                            <GradientStop Offset="1" Color="LightGray" />
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <!--  画一个垂直方向的直线  -->
                                <Rectangle
                                    x:Name="ExpandPath"
                                    Width="1"
                                    Height="5"
                                    SnapsToDevicePixels="true"
                                    Stroke="Black" />
                                <!--  画一个水平方向的直线  -->
                                <Rectangle
                                    Width="5"
                                    Height="1"
                                    SnapsToDevicePixels="true"
                                    Stroke="Black" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!--  通过IsChecked判断折叠还是展开  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ExpandPath" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <local:TreeViewLineConverter x:Key="LineConverter" />
            <!--  （通用）可视化树孩子样式  -->
            <Style TargetType="{x:Type TreeViewItem}">
                <EventSetter Event="RequestBringIntoView" Handler="EventSetter_OnHandler" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->
                <!--<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Foreground" Value="#FF565656" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="TabIndex" Value="{Binding Index}" />
                <!--<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid Margin="{Binding Converter={StaticResource GridLeftMarginConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="25" />
                                    <ColumnDefinition Width="Auto" MinWidth="19" />
                                    <ColumnDefinition Width="Auto" MinWidth="20" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" MinHeight="20" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <!--  Connecting Lines  -->
                                <!--  Horizontal line  -->
                                <controls:MultipleCheckBox
                                    Grid.Column="0"
                                    Margin="{Binding Converter={StaticResource LeftMarginConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}}"
                                    CanChooseAll="{Binding CanChooseAll}"
                                    CheckType="{Binding CheckType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    Command="{Binding Command}" />
                                <Rectangle
                                    x:Name="HorLn"
                                    Grid.Column="1"
                                    Height="1"
                                    Margin="8,0,0,0"
                                    Stroke="Black" />
                                <!--  Vertical line  -->
                                <Rectangle
                                    x:Name="VerLn"
                                    Grid.RowSpan="2"
                                    Grid.Column="1"
                                    Width="1"
                                    Margin="-1,-3,0,0"
                                    Stroke="Black" />
                                <!--<ItemsPresenter x:Name="ItemsPresenter"></ItemsPresenter>-->
                                <ToggleButton
                                    x:Name="Expander"
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    ClickMode="Press"
                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource ExpandCollapseToggleStyle}" />
                                <Border
                                    x:Name="Bd"
                                    Grid.Column="2"
                                    Margin="1"
                                    Padding="{TemplateBinding Padding}"
                                    HorizontalAlignment="Left"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="4"
                                    SnapsToDevicePixels="true">
                                    <!--<ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                                    <TextBlock Width="145" Text="{Binding Name}" />
                                </Border>
                                <ItemsPresenter
                                    x:Name="ItemsHost"
                                    Grid.Row="1"
                                    Grid.Column="2"
                                    Grid.ColumnSpan="2" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                                </Trigger>

                                <!--  当前层最后一个元素不画下方垂直线  -->
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
                                    <Setter TargetName="VerLn" Property="Height" Value="15" />
                                    <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
                                </DataTrigger>
                                <!--  Root第一个元素不显示上方垂直线  -->
                                <Trigger Property="TabIndex" Value="1">
                                    <Setter TargetName="VerLn" Property="Margin" Value="-1,12,0,0" />
                                    <Setter TargetName="VerLn" Property="Height" Value="Auto" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel />
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>

            </Style>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="25" />
            <RowDefinition Height="*" />
            <RowDefinition Height="35" />
            <RowDefinition Height="35" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="26*" MinWidth="260" />
            <ColumnDefinition Width="30*" MinWidth="300" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>
        <!--<controls:AutoCompleteBox Padding="25,0,0,0" Grid.Row="0" Grid.Column="0" PreviewKeyDown="UIElement_OnPreviewKeyDown" ItemsSource="{Binding FilterList}"
                                  IsTextCompletionEnabled="False" MaxDropDownHeight="0" Text="{Binding FilterName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"></controls:AutoCompleteBox>-->
        <TextBox
            Grid.Row="0"
            Grid.Column="0"
            Padding="25,0,0,0"
            PreviewKeyDown="UIElement_OnPreviewKeyDown"
            Text="{Binding FilterName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Button
            Grid.Row="0"
            Grid.Column="0"
            Width="24"
            Height="21"
            MinWidth="20"
            Margin="2,2,0,0"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Click="ButtonBase_OnClick">
            <Button.ContextMenu>
                <ContextMenu Closed="ContextMenu_OnClosed">
                    <MenuItem Header="Filter on Name" IsChecked="True" />
                    <MenuItem Header="Filter on Description" />
                    <MenuItem Header="Filter on Both" />
                </ContextMenu>
            </Button.ContextMenu>
            <Button.Content>
                <Path Fill="Gray">
                    <Path.Data>
                        <PathGeometry>
                            <PathFigure
                                IsClosed="True"
                                IsFilled="True"
                                StartPoint="0,0">
                                <LineSegment Point="7,10" />
                                <LineSegment Point="7,18" />
                                <LineSegment Point="9,18" />
                                <LineSegment Point="9,10" />
                                <LineSegment Point="16,0" />
                            </PathFigure>
                            <PathFigure
                                IsClosed="True"
                                IsFilled="True"
                                StartPoint="11,14">
                                <LineSegment Point="14,17" />
                                <LineSegment Point="17,14" />
                            </PathFigure>
                        </PathGeometry>

                    </Path.Data>
                </Path>
            </Button.Content>
        </Button>
        <TextBlock
            Grid.Row="0"
            Grid.Column="1"
            Text="{DynamicResource Show:}" />
        <ComboBox
            Grid.Row="0"
            Grid.Column="1"
            Width="250"
            Height="25"
            HorizontalAlignment="Right"
            DisplayMemberPath="Name"
            ItemsSource="{Binding ShowList}"
            SelectedItem="{Binding SelectedShowItem}"
            SelectionChanged="Selector_OnSelectionChanged">
            <ComboBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <Grid Height="1" Background="Black" />
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                </GroupStyle>
            </ComboBox.GroupStyle>
            <ComboBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
        </ComboBox>
        <DataGrid
            x:Name="MainDataGrid"
            Grid.Row="1"
            Grid.Column="0"
            Grid.ColumnSpan="2"
            Width="auto"
            Height="auto"
            MinWidth="560"
            MinHeight="140"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            AutoGenerateColumns="False"
            Background="White"
            BorderThickness="0"
            CanUserDeleteRows="False"
            CanUserSortColumns="False"
            EnableRowVirtualization="True"
            GridLinesVisibility="None"
            IsSynchronizedWithCurrentItem="True"
            ItemsSource="{Binding TagItems, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
            LoadingRow="DataGrid_OnLoadingRow"
            ScrollViewer.CanContentScroll="True"
            SelectedItem="{Binding SelectedTag, UpdateSourceTrigger=PropertyChanged}"
            SelectionChanged="MainDataGrid_OnSelectionChanged"
            VirtualizingPanel.IsVirtualizing="True"
            VirtualizingPanel.IsVirtualizingWhenGrouping="True"
            VirtualizingStackPanel.ScrollUnit="Item"
            VirtualizingStackPanel.VirtualizationMode="Recycling">
            <DataGrid.InputBindings>
                <MouseBinding Command="{Binding DataGridDoubleClickCommand}" MouseAction="LeftDoubleClick" />
            </DataGrid.InputBindings>
            <DataGrid.Resources>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="BorderThickness" Value="0" />
                </Style>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTemplateColumn
                    Width="160"
                    IsReadOnly="True">
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{DynamicResource Name}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <VirtualizingStackPanel Orientation="Horizontal">
                                <TextBlock Margin="{Binding Left}" />
                                <Button
                                    x:Name="expendButton"
                                    Width="15"
                                    MinWidth="15"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    Command="{Binding ExpendCommand}"
                                    Visibility="{Binding ShowExpand}">
                                    <Button.Content>
                                        <Grid>
                                            <Path
                                                x:Name="Collapsed"
                                                Margin="1,1,1,1"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center"
                                                Data="M 4 0 L 8 4 L 4 8 Z"
                                                Stroke="Black"
                                                StrokeThickness="1"
                                                Visibility="{Binding ExpanderVis, UpdateSourceTrigger=PropertyChanged}" />
                                            <Path
                                                x:Name="Expanded"
                                                Margin="1,1,1,1"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Center"
                                                Data="M 8 0 L 8 8 L 0 8 Z"
                                                Visibility="{Binding ExpanderCloseVis, UpdateSourceTrigger=PropertyChanged}">
                                                <Path.Fill>
                                                    <SolidColorBrush Color="#FF444444" />
                                                </Path.Fill>
                                            </Path>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                                <TextBlock Text="{Binding Name}" />
                            </VirtualizingStackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTextColumn
                    Width="160"
                    Binding="{Binding DataType}"
                    IsReadOnly="True">
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{DynamicResource DataType}"/>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>
                </DataGridTextColumn>
                <DataGridTextColumn
                    Width="100"
                    Binding="{Binding Usage}"
                    Header="Usage"
                    IsReadOnly="True"
                    Visibility="{Binding Data.Visibility, Source={StaticResource Proxy}}" />
                <DataGridTextColumn
                    Width="100"
                    Binding="{Binding Description}"
                    IsReadOnly="True"
                    Visibility="{Binding Data.Visibility, Source={StaticResource Proxy}}">
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{DynamicResource Description}"/>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
        <CheckBox
            Grid.Row="2"
            Grid.Column="0"
            IsChecked="{Binding ShowController}"
            IsEnabled="{Binding ControllerCheckBoxEnable, UpdateSourceTrigger=PropertyChanged}"
            Visibility="{Binding ShowNormal}"
            Content="{DynamicResource Show Controller Variable}">
            
        </CheckBox>
        <CheckBox
            Grid.Row="3"
            Grid.Column="0"
            Content="{Binding ProgramContent}"
            IsChecked="{Binding ShowProgram}"
            IsEnabled="{Binding ProgramCheckBoxEnable, UpdateSourceTrigger=PropertyChanged}"
            Visibility="{Binding ShowNormal}" />
        <TextBlock
            Grid.Row="4"
            Grid.Column="0"
            Text="{DynamicResource Show parameters from other program:}"
            Visibility="{Binding ShowLastRow}" />
        <ComboBox
            Grid.Row="5"
            Grid.Column="0"
            Height="25"
            IsEnabled="{Binding ProgramCheckBoxEnable, UpdateSourceTrigger=PropertyChanged}"
            ItemsSource="{Binding OtherProgramList}"
            SelectedValue="{Binding SelectedOther}"
            Visibility="{Binding ShowLastRow}" />
        <Grid
            Grid.Row="0"
            Grid.RowSpan="6"
            Grid.Column="2"
            Width="150"
            Visibility="{Binding VisibilityCol3}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="50" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <TextBlock
                Grid.Row="0"
                Width="150"
                VerticalAlignment="Top"
                Text="Filter On:" />
            <ComboBox
                Grid.Row="1"
                Width="148"
                Height="25"
                VerticalAlignment="Center"
                DisplayMemberPath="DisplayName"
                ItemsSource="{Binding FilterOnList}"
                SelectedValue="{Binding SelectedFilterOnType}"
                SelectedValuePath="Value" />
            <TreeView
                Grid.Row="2"
                Width="150"
                Height="150"
                VerticalAlignment="Top"
                ItemsSource="{Binding DataTypeItems}"
                ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                ScrollViewer.IsDeferredScrollingEnabled="True"
                VirtualizingPanel.IsVirtualizing="True"
                VirtualizingStackPanel.VirtualizationMode="Recycling">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}" />
                </TreeView.ItemTemplate>
            </TreeView>
        </Grid>
        <CheckBox
            Grid.Row="2"
            Grid.Column="0"
            IsChecked="{Binding Inputs}"
            Visibility="{Binding ShowAOI}">
            Inputs
        </CheckBox>
        <CheckBox
            Grid.Row="3"
            Grid.Column="0"
            IsChecked="{Binding Outputs}"
            Visibility="{Binding ShowAOI}">
            Outputs
        </CheckBox>
        <CheckBox
            Grid.Row="2"
            Grid.Column="1"
            Margin="0,5,20,0"
            HorizontalAlignment="Right"
            IsChecked="{Binding InOuts}"
            Visibility="{Binding ShowAOI}">
            InOuts
        </CheckBox>
        <CheckBox
            Grid.Row="3"
            Grid.Column="1"
            Margin="0,5,23,0"
            HorizontalAlignment="Right"
            IsChecked="{Binding Locals}"
            Visibility="{Binding ShowAOI}">
            Locals
        </CheckBox>
    </Grid>
</UserControl>
